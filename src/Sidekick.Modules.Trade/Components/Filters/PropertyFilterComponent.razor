@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Game.Languages
@using Sidekick.Common.Settings

<FilterWrapper>
    <div class="flex flex-nowrap items-center">
        <div class="grow">
            @if (Filter.ValueType == FilterValueType.Boolean)
            {
                <FormTriStateCheckbox @bind-Value="Filter.Checked"
                                      NoMargin="true">
                    <ItemPropertyText Label="@Filter.Text"
                                      Value="@Filter.Value.ToString()"
                                      OnlyShowLabel="true"/>
                </FormTriStateCheckbox>
            }
            else
            {
                <FormCheckbox Value="Filter.Checked ?? false"
                              NoMargin="true"
                              ValueChanged="CheckedChanged">
                    @if (Filter.Type == PropertyFilterType.Weapon_Damage)
                    {
                        if (PriceCheckService.Item?.Properties.PhysicalDamage != null)
                        {
                            <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionPhysicalDamage"
                                              Value="@PriceCheckService.Item.Properties.PhysicalDamage.ToDisplayString()"
                                              ContentType="LineContentType.Physical"/>
                        }
                        if (PriceCheckService.Item?.Properties.FireDamage != null)
                        {
                            <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionFireDamage"
                                              Value="@PriceCheckService.Item.Properties.FireDamage.ToDisplayString()"
                                              ContentType="LineContentType.Fire"/>
                        }
                        if (PriceCheckService.Item?.Properties.ColdDamage != null)
                        {
                            <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionColdDamage"
                                              Value="@PriceCheckService.Item.Properties.ColdDamage.ToDisplayString()"
                                              ContentType="LineContentType.Cold"/>
                        }
                        if (PriceCheckService.Item?.Properties.LightningDamage != null)
                        {
                            <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionLightningDamage"
                                              Value="@PriceCheckService.Item.Properties.LightningDamage.ToDisplayString()"
                                              ContentType="LineContentType.Lightning"/>
                        }
                        if (PriceCheckService.Item?.Properties.ChaosDamage != null)
                        {
                            <ItemPropertyText Label="@GameLanguageProvider.Language.DescriptionChaosDamage"
                                              Value="@PriceCheckService.Item.Properties.ChaosDamage.ToDisplayString()"
                                              ContentType="LineContentType.Chaos"/>
                        }
                    }
                    else
                    {
                        <ItemPropertyText Label="@Filter.Text"
                                          Value="@Filter.Value.ToString()"/>
                    }
                </FormCheckbox>
            }
        </div>

        @if ((Filter.Checked ?? false) && HasValueFilters)
        {
            <FilterRange @bind-Min="@Filter.Min" @bind-Max="@Filter.Max" TypeChanged="TypeChanged"/>
        }
    </div>
</FilterWrapper>

@inject PriceCheckService PriceCheckService
@inject IGameLanguageProvider GameLanguageProvider
@inject ISettingsService SettingsService

@code {

    [Parameter]
    public required PropertyFilter Filter { get; set; }

    private bool HasValueFilters => Filter.ValueType is FilterValueType.Double or FilterValueType.Int;

    private async void CheckedChanged(bool value)
    {
        Filter.Checked = value;

        // We can change the settings in the Trade window, so we should fetch here every time.
        Filter.NormalizeValue = await SettingsService.GetObject<double>(SettingKeys.PriceCheckNormalizeValue);
        Filter.NormalizeMinValue();
    }

    private void TypeChanged(FilterRange.RangeType type)
    {
        switch (type)
        {
            case FilterRange.RangeType.Minimum:
                Filter.NormalizeMinValue();
                Filter.Max = null;
                break;

            case FilterRange.RangeType.Maximum:
                Filter.NormalizeMaxValue();
                Filter.Min = null;
                break;

            case FilterRange.RangeType.Equals: Filter.SetExactValue(); break;

            case FilterRange.RangeType.Range:
                Filter.NormalizeMinValue();
                Filter.NormalizeMaxValue();
                break;
        }
    }

}
