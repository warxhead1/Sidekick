@using Sidekick.Apis.Poe.Bulk;
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Prices

@if (PriceCheckService.Item == null)
{
    return;
}

<div class="flex flex-col h-full">
    <div>
        <ItemHeader Name="@PriceCheckService.Item.Header.Name"
                    Type="@PriceCheckService.Item.Header.Type"
                    Rarity="PriceCheckService.Item.Metadata.Rarity"
                    Influences="PriceCheckService.Item.Influences"/>
    </div>

    <div class="grow overflow-y-auto pb-9">
        <SidekickErrorBoundary>
            <PriceNinjaComponent/>
        </SidekickErrorBoundary>
        <SidekickErrorBoundary>
            <PricePredictionComponent/>
        </SidekickErrorBoundary>

        @if (PriceCheckService.PropertyFilters != null)
        {
            <HeaderFilters/>

            @RenderPropertyFilters(PriceCheckService.PropertyFilters.Armour)
            @RenderPropertyFilters(PriceCheckService.PropertyFilters.Weapon)
            @RenderPropertyFilters(PriceCheckService.PropertyFilters.Map)
            @RenderPropertyFilters(PriceCheckService.PropertyFilters.Misc)
        }

        <ModifierFiltersComponent/>
        <PseudoFiltersComponent/>
    </div>

    <div class="flex flex-nowrap w-full">
        <div class="flex flex-col items-stretch text-center p-2 @(PriceCheckService.SupportsBulk ? "w-1/2" : "w-full")">
            <ButtonPrimary OnClick="PriceCheckService.ItemSearch">@Resources["Search"]</ButtonPrimary>
        </div>
        @if (PriceCheckService.SupportsBulk)
        {
            <div class="w-1/2 flex flex-col items-stretch text-center p-2">
                <ButtonSecondary OnClick="PriceCheckService.BulkSearch">@Resources["Bulk Search"]</ButtonSecondary>
            </div>
        }
    </div>
</div>

@implements  IDisposable

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@inject IBulkTradeService BulkTradeService
@inject PriceCheckService PriceCheckService

@code {

    private bool HasAnyFilter { get; set; }

    private RenderFragment RenderPropertyFilters(List<PropertyFilter> filters) => @<div>
                                                                                      @foreach (var filter in filters)
                                                                                      {
                                                                                          <PropertyFilterComponent Filter="filter"/>
                                                                                      }

                                                                                      @if (filters.Count > 0)
                                                                                      {
                                                                                          <ItemSeparator Rarity="PriceCheckService.Item?.Metadata.Rarity ?? Rarity.Unknown"/>
                                                                                      }
                                                                                  </div>;

    protected override async Task OnInitializedAsync()
    {
        PriceCheckService.FilterLoadingChanged += StateHasChanged;

        await base.OnInitializedAsync();

        var propertyCount = 0;
        propertyCount += PriceCheckService.PropertyFilters?.Armour.Count ?? 0;
        propertyCount += PriceCheckService.PropertyFilters?.Map.Count ?? 0;
        propertyCount += PriceCheckService.PropertyFilters?.Misc.Count ?? 0;
        propertyCount += PriceCheckService.PropertyFilters?.Weapon.Count ?? 0;

        var modifierCount = 0;
        modifierCount += PriceCheckService.ModifierFilters.Count;

        HasAnyFilter = modifierCount + propertyCount > 0;
    }

    public void Dispose()
    {
        PriceCheckService.FilterLoadingChanged -= StateHasChanged;
    }

}
