@using Sidekick.Apis.Poe.Bulk;
@using Sidekick.Apis.Poe.Trade.Models
@using Sidekick.Common.Game.Items
@using Sidekick.Common.Settings
@using Sidekick.Modules.Trade.Localization
@using Sidekick.Modules.Trade.Components.Prices
@using Sidekick.Modules.Trade.Components.Items
@using Sidekick.Modules.Trade.Components.Bulk
@using Sidekick.Modules.Trade.Components.Filters
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Localization
@using Sidekick.Common.Game.Languages
@using Sidekick.Common.Ui.Forms
@using Sidekick.Common.Ui.Poe.Items
@using Sidekick.Common.Ui.Buttons
@using Sidekick.Common.Ui.Errors
@using Sidekick.Common.Ui.Tooltips

@if (PriceCheckService.Item == null)
{
    return;
}

<div class="flex flex-col h-full">
    <div>
        <ItemHeader Name="@PriceCheckService.Item.Header.Name"
                    Type="@PriceCheckService.Item.Header.Type"
                    Rarity="PriceCheckService.Item.Metadata.Rarity"
                    Influences="PriceCheckService.Item.Influences"/>
        
        <div class="text-center text-[#7f7f7f]">
            @if (PriceCheckService.Item.Properties.BaseDefencePercentile.HasValue)
            {
                <ItemPropertyText Label="@Resources["Base Percentile"]" Value="@(PriceCheckService.Item.Properties.BaseDefencePercentile + "%")"/>
            }
        </div>
        <ItemSeparator Rarity="PriceCheckService.Item.Metadata.Rarity"/>
    </div>

    <div class="grow overflow-y-auto pb-9">
        <SidekickErrorBoundary>
            <PriceNinjaComponent/>
        </SidekickErrorBoundary>
        <SidekickErrorBoundary>
            <PricePredictionComponent/>
        </SidekickErrorBoundary>

        <div class="flex flex-col">
            <div class="pl-2 flex flex-col">
                <FilterWrapper>
                    <FormCheckbox Value="@(PriceCheckService.PropertyFilters?.TypeFilterEnabled ?? false)"
                                NoMargin="true"
                                ValueChanged="(v) => PriceCheckService.UpdateTypeFilter(v)">
                        <ItemPropertyText Label="Item Category"
                                        Value="@(GetItemClass() ?? PriceCheckService.Item.Header.Type)" />
                    </FormCheckbox>
                </FilterWrapper>
                @if (PriceCheckService.PropertyFilters?.TypeFilterEnabled ?? false)
                {
                    <FilterWrapper>
                        <FormCheckbox Value="@(PriceCheckService.PropertyFilters?.UseSpecificType ?? false)"
                                    NoMargin="true"
                                    ValueChanged="(v) => PriceCheckService.UpdateUseSpecificType(v)">
                            <ItemPropertyText Label="Use Specific Type"
                                            Value="@PriceCheckService.Item.Metadata.Type" />
                        </FormCheckbox>
                    </FilterWrapper>
                }
                <FilterWrapper>
                    <FormCheckbox Value="@(PriceCheckService.PropertyFilters?.RarityFilterEnabled ?? false)"
                                NoMargin="true"
                                ValueChanged="(v) => PriceCheckService.UpdateRarityFilter(v)">
                        <ItemPropertyText Label="Rarity"
                                        Value="@PriceCheckService.Item.Metadata.Rarity.ToString()" />
                    </FormCheckbox>
                </FilterWrapper>
            </div>

            @if (PriceCheckService.PropertyFilters != null)
            {
                <ItemSeparator Rarity="PriceCheckService.Item.Metadata.Rarity"/>
                <div class="pl-2 flex flex-col">
                    @if (PriceCheckService.PropertyFilters.Armour.Any())
                    {
                        @foreach (var filter in PriceCheckService.PropertyFilters.Armour)
                        {
                            <PropertyFilterComponent Filter="filter" />
                        }
                    }

                    @if (PriceCheckService.PropertyFilters.Weapon.Any())
                    {
                        @foreach (var filter in PriceCheckService.PropertyFilters.Weapon)
                        {
                            <PropertyFilterComponent Filter="filter" />
                        }
                    }

                    @if (PriceCheckService.PropertyFilters.Map.Any())
                    {
                        @foreach (var filter in PriceCheckService.PropertyFilters.Map)
                        {
                            <PropertyFilterComponent Filter="filter" />
                        }
                    }

                    @if (PriceCheckService.PropertyFilters.Misc.Any())
                    {
                        <ItemSeparator Rarity="PriceCheckService.Item.Metadata.Rarity"/>
                        @foreach (var filter in PriceCheckService.PropertyFilters.Misc)
                        {
                            <PropertyFilterComponent Filter="filter" />
                        }
                    }
                    <ItemSeparator Rarity="PriceCheckService.Item.Metadata.Rarity"/>
                </div>
            }

            @if (PriceCheckService.SupportsBulk)
            {
                <BulkFiltersComponent />
            }
        </div>

        <ModifierFiltersComponent/>
        <PseudoFiltersComponent/>
    </div>

    <div class="flex flex-nowrap w-full">
        <div class="flex flex-col items-stretch text-center p-2 @(PriceCheckService.SupportsBulk ? "w-1/2" : "w-full")">
            <ButtonPrimary OnClick="PriceCheckService.ItemSearch">@Resources["Search"]</ButtonPrimary>
        </div>
        @if (PriceCheckService.SupportsBulk)
        {
            <div class="w-1/2 flex flex-col items-stretch text-center p-2">
                <ButtonSecondary OnClick="PriceCheckService.BulkSearch">@Resources["Bulk Search"]</ButtonSecondary>
            </div>
        }
    </div>
</div>

@implements  IDisposable

@inject IStringLocalizer<TradeResources> Resources
@inject ISettingsService SettingsService
@inject IBulkTradeService BulkTradeService
@inject PriceCheckService PriceCheckService
@inject IGameLanguageProvider GameLanguageProvider
@inject ILogger<FiltersComponent> Logger

@code {
    protected override async Task OnInitializedAsync()
    {
        PriceCheckService.FilterLoadingChanged += StateHasChanged;
        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        PriceCheckService.FilterLoadingChanged -= StateHasChanged;
    }

    private string? GetItemClass()
    {
        var itemClass = PriceCheckService.Item.Header.ItemCategory;
        if (string.IsNullOrEmpty(itemClass))
        {
            return null;
        }

        var classLanguage = GameLanguageProvider.Language.Classes;
        return itemClass switch
        {
            "armour.chest" => classLanguage.BodyArmours,
            "armour.boots" => classLanguage.Boots,
            "armour.gloves" => classLanguage.Gloves,
            "armour.helmet" => classLanguage.Helmets,
            "armour.shield" => classLanguage.Shields,
            "armour.quiver" => classLanguage.Quivers,
            "weapon.bow" => classLanguage.Bows,
            "weapon.claw" => classLanguage.Claws,
            "weapon.dagger" => classLanguage.Daggers,
            "weapon.runedagger" => classLanguage.RuneDaggers,
            "weapon.wand" => classLanguage.Wands,
            "weapon.oneaxe" => classLanguage.OneHandAxes,
            "weapon.onemace" => classLanguage.OneHandMaces,
            "weapon.onesword" => classLanguage.OneHandSwords,
            "weapon.sceptre" => classLanguage.Sceptres,
            "weapon.staff" => classLanguage.Staves,
            "weapon.warstaff" => classLanguage.Warstaves,
            "weapon.twoaxe" => classLanguage.TwoHandAxes,
            "weapon.twomace" => classLanguage.TwoHandMaces,
            "weapon.twosword" => classLanguage.TwoHandSwords,
            "accessory.amulet" => classLanguage.Amulet,
            "accessory.belt" => classLanguage.Belt,
            "accessory.ring" => classLanguage.Ring,
            "accessory.trinket" => classLanguage.Trinkets,
            "flask.life" => classLanguage.LifeFlasks,
            "flask.mana" => classLanguage.ManaFlasks,
            "flask.hybrid" => classLanguage.HybridFlasks,
            "flask.utility" => classLanguage.UtilityFlasks,
            "gem.activegem" => classLanguage.ActiveSkillGems,
            "gem.supportgem" => classLanguage.SupportSkillGems,
            "jewel" => classLanguage.Jewel,
            "jewel.abyss" => classLanguage.AbyssJewel,
            _ => null
        };
    }
}
