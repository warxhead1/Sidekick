@using Sidekick.Apis.Poe.Filters
@using Sidekick.Apis.Poe.Localization
@using Sidekick.Common.Blazor.Settings
@using Sidekick.Common.Extensions
@using Sidekick.Common.Game
@using Sidekick.Common.Settings

<FormSelect Label="@Resources["Currency_of_Listed_Items"]"
            Value="@Currency"
            ValueChanged="CurrencyChanged"
            Options="Options"/>

@inject IStringLocalizer<SettingsResources> Resources
@inject ISettingsService SettingsService
@inject IStringLocalizer<TradeCurrencyResources> OptionsLocalizer
@inject IFilterProvider FilterProvider

@code {

    private string? Currency { get; set; }

    private List<SelectOption> Options { get; set; } =
    [
    ];

    protected override async Task OnInitializedAsync()
    {
        var league = await SettingsService.GetString(SettingKeys.LeagueId);
        var game = league.GetGameFromLeagueId();
        Currency = game == GameType.PathOfExile ? await SettingsService.GetString(SettingKeys.PriceCheckItemCurrency) : await SettingsService.GetString(SettingKeys.PriceCheckItemCurrencyPoE2);
        Currency = FilterProvider.GetPriceOption(Currency);

        Options = FilterProvider.PriceOptions.ConvertAll(x => new SelectOption()
        {
            Label = x.Text ?? string.Empty,
            Value = x.Id,
        });

        await base.OnInitializedAsync();
    }

    private async Task CurrencyChanged(string? value)
    {
        Currency = value;

        var league = await SettingsService.GetString(SettingKeys.LeagueId);
        var game = league.GetGameFromLeagueId();
        if (game == GameType.PathOfExile)
        {
            await SettingsService.Set(SettingKeys.PriceCheckItemCurrency, value);
        }
        else
        {
            await SettingsService.Set(SettingKeys.PriceCheckItemCurrencyPoE2, value);
        }
    }

}
